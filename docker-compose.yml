pipeline {
    agent any

    options {
        // Fail the build after 1 hour
        timeout(time: 60, unit: 'MINUTES')

        // Keep only the last 10 builds to save space
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        // Project-specific environment variables
        SAIL_ENVIRONMENT_FILE = '.env'
        COMPOSE_PROJECT_NAME = 'laravel-ci-cd-pipeline'
        DOCKER_BUILDKIT = 1
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from the Git repository
                git url: 'https://github.com/Andualem-Andy/laravel-backend-ci-cd.git', branch: 'main'
            }
        }

        stage('Install Laravel Sail Dependencies') {
            steps {
                script {
                    // Install Laravel Sail (only needed if it's not committed to your repo)
                    sh 'composer require laravel/sail --dev'
                }
            }
        }

        stage('Build and Start Docker Containers') {
            steps {
                script {
                    // Build and start the Laravel Sail environment
                    sh './vendor/bin/sail up -d'
                }
            }
        }

        stage('Install PHP Dependencies') {
            steps {
                script {
                    // Install Composer dependencies within the Sail container
                    sh './vendor/bin/sail composer install --prefer-dist --no-progress --no-interaction'
                }
            }
        }

        stage('Run Migrations') {
            steps {
                script {
                    // Run Laravel migrations within the container
                    sh './vendor/bin/sail artisan migrate --force'
                }
            }
        }

        stage('Run Tests') {
            parallel {
                stage('PHPUnit Tests') {
                    steps {
                        script {
                            // Run PHPUnit tests
                            sh './vendor/bin/sail test --parallel'
                        }
                    }
                }

                stage('Static Analysis') {
                    steps {
                        script {
                            // Run static code analysis (optional but good practice)
                            sh './vendor/bin/sail pint'
                        }
                    }
                }
            }
        }

        stage('Stop and Clean Up') {
            steps {
                script {
                    // Stop the Sail containers after the tests
                    sh './vendor/bin/sail down'
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker containers...'
            // Ensure Docker containers are stopped and removed
            sh './vendor/bin/sail down || true'
        }

        success {
            echo 'Build completed successfully!'
        }

        failure {
            echo 'Build failed! Please check the logs.'
            // You can add notification hooks here, such as Slack or email
        }
    }
}
